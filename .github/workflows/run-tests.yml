name: Selenium Test Suite - Cross Browser Parallel

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write

    strategy:
      matrix:
        browser: [chrome, edge]
      fail-fast: false  # Continue other browsers even if one fails

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Install Chrome and Chromedriver
        if: matrix.browser == 'chrome'
        run: |
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
          CHROME_VERSION=$(google-chrome --version | awk '{print $3}' | cut -d '.' -f1)
          DRIVER_VERSION=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/LATEST_RELEASE_${CHROME_VERSION}")
          echo "Chrome version: $(google-chrome --version)"
          echo "Chromedriver version: $DRIVER_VERSION"
          wget -O chromedriver.zip "https://storage.googleapis.com/chrome-for-testing-public/${DRIVER_VERSION}/linux64/chromedriver-linux64.zip"
          unzip chromedriver.zip
          sudo mv chromedriver-linux64/chromedriver /usr/local/bin/
          sudo chmod +x /usr/local/bin/chromedriver

      - name: Install Edge and EdgeDriver
        if: matrix.browser == 'edge'
        run: |
          # Install Edge browser
          curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg
          sudo install -o root -g root -m 644 microsoft.gpg /etc/apt/trusted.gpg.d/
          sudo sh -c 'echo "deb [arch=amd64] https://packages.microsoft.com/repos/edge stable main" > /etc/apt/sources.list.d/microsoft-edge-dev.list'
          sudo apt-get update
          sudo apt-get install -y microsoft-edge-stable
          
          # Get Edge version
          EDGE_VERSION=$(microsoft-edge --version | awk '{print $3}')
          EDGE_MAJOR_VERSION=$(echo $EDGE_VERSION | cut -d '.' -f1)
          echo "Edge version: $EDGE_VERSION"
          echo "Edge major version: $EDGE_MAJOR_VERSION"
          
          # Install EdgeDriver using the correct URL format
          echo "Installing EdgeDriver..."
          
          # Try multiple CDN endpoints
          DRIVER_URLS=(
            "https://msedgewebdriverstorage.blob.core.windows.net/edgewebdriver/${EDGE_VERSION}/edgedriver_linux64.zip"
            "https://msedgedriver.azureedge.net/${EDGE_VERSION}/edgedriver_linux64.zip"
            "https://msedgewebdriverstorage.z22.web.core.windows.net/${EDGE_VERSION}/edgedriver_linux64.zip"
          )
          
          DRIVER_DOWNLOADED=false
          
          for URL in "${DRIVER_URLS[@]}"; do
            echo "Attempting to download EdgeDriver from: $URL"
            if wget --timeout=30 --tries=2 -O edgedriver.zip "$URL" 2>/dev/null; then
              echo "Successfully downloaded EdgeDriver"
              unzip -q edgedriver.zip
              if [ -f "msedgedriver" ]; then
                sudo mv msedgedriver /usr/local/bin/
                sudo chmod +x /usr/local/bin/msedgedriver
                DRIVER_DOWNLOADED=true
                break
              fi
            fi
          done
          
          # If specific version fails, try to get the latest stable version
          if [ "$DRIVER_DOWNLOADED" = false ]; then
            echo "Specific version download failed, trying latest stable..."
            
            # Get latest stable version from the API
            LATEST_STABLE=$(curl -s "https://msedgewebdriverstorage.blob.core.windows.net/edgewebdriver/LATEST_STABLE" || echo "")
            
            if [ -n "$LATEST_STABLE" ]; then
              echo "Latest stable version: $LATEST_STABLE"
              STABLE_URL="https://msedgewebdriverstorage.blob.core.windows.net/edgewebdriver/${LATEST_STABLE}/edgedriver_linux64.zip"
              
              if wget --timeout=30 --tries=2 -O edgedriver.zip "$STABLE_URL"; then
                echo "Successfully downloaded latest stable EdgeDriver"
                unzip -q edgedriver.zip
                if [ -f "msedgedriver" ]; then
                  sudo mv msedgedriver /usr/local/bin/
                  sudo chmod +x /usr/local/bin/msedgedriver
                  DRIVER_DOWNLOADED=true
                fi
              fi
            fi
          fi
          
          # Final fallback: Use Python webdriver-manager
          if [ "$DRIVER_DOWNLOADED" = false ]; then
            echo "Direct download failed, using webdriver-manager..."
            pip install webdriver-manager
            
            cat > install_edge_driver.py << 'PYEOF'
          import os
          import sys
          from webdriver_manager.microsoft import EdgeChromiumDriverManager
          
          try:
              # Try to install EdgeDriver
              driver_path = EdgeChromiumDriverManager().install()
              print(f'Driver installed at: {driver_path}')
              
              # Create symlink to standard location
              import shutil
              if os.path.exists(driver_path):
                  shutil.copy2(driver_path, '/tmp/msedgedriver')
                  os.chmod('/tmp/msedgedriver', 0o755)
                  print('EdgeDriver copied to /tmp/msedgedriver')
          except Exception as e:
              print(f'webdriver-manager failed: {e}')
              sys.exit(1)
          PYEOF
            
            python install_edge_driver.py
            
            if [ -f "/tmp/msedgedriver" ]; then
              sudo mv /tmp/msedgedriver /usr/local/bin/
              sudo chmod +x /usr/local/bin/msedgedriver
              DRIVER_DOWNLOADED=true
            fi
          fi
          
          # Verify installation
          if [ "$DRIVER_DOWNLOADED" = true ] && command -v msedgedriver &> /dev/null; then
            echo "EdgeDriver version: $(msedgedriver --version || echo 'Version check failed')"
            echo "EdgeDriver installation successful"
          else
            echo "WARNING: EdgeDriver installation may have issues, but continuing..."
            # Don't fail the job, let the test handle the missing driver
          fi

      - name: Install system dependencies for browser stability
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            xvfb \
            x11-utils \
            libx11-6 \
            libx11-xcb1 \
            libxcomposite1 \
            libxcursor1 \
            libxdamage1 \
            libxext6 \
            libxfixes3 \
            libxi6 \
            libxrandr2 \
            libxrender1 \
            libxss1 \
            libxtst6 \
            libnss3 \
            libnspr4 \
            libasound2 \
            libatk-bridge2.0-0 \
            libgtk-3-0 \
            libgbm1 \
            libxkbcommon0 \
            libxshmfence1 \
            curl \
            wget \
            unzip || true

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-rerunfailures webdriver-manager

      - name: Create Keyword-Driven Test Data
        run: python create_fresh_test_data.py

      - name: Configure Test Settings for CI
        run: |
          # Set headless mode
          sed -i 's/^headless_mode = False/headless_mode = True/' selenium_demoblaze_framework/config/config.ini
          
          # Increase timeouts for CI environment
          if grep -q "implicit_wait" selenium_demoblaze_framework/config/config.ini; then
            sed -i 's/^implicit_wait = .*/implicit_wait = 15/' selenium_demoblaze_framework/config/config.ini
          else
            echo "implicit_wait = 15" >> selenium_demoblaze_framework/config/config.ini
          fi
          
          if grep -q "page_load_timeout" selenium_demoblaze_framework/config/config.ini; then
            sed -i 's/^page_load_timeout = .*/page_load_timeout = 30/' selenium_demoblaze_framework/config/config.ini
          else
            echo "page_load_timeout = 30" >> selenium_demoblaze_framework/config/config.ini
          fi

      - name: Set Display for Headless Execution
        run: |
          export DISPLAY=:99
          Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
          sleep 3

      - name: Run Pytest with Parallel Execution and Retries
        env:
          PYTHONPATH: ${{ github.workspace }}
          DISPLAY: :99
        run: |
          # Set environment variables for Edge driver location
          if [ "${{ matrix.browser }}" = "edge" ]; then
            export EDGE_BINARY_PATH=$(which microsoft-edge || echo "")
            export EDGE_DRIVER_PATH=$(which msedgedriver || echo "")
            echo "Edge binary: $EDGE_BINARY_PATH"
            echo "Edge driver: $EDGE_DRIVER_PATH"
          fi
          
          # Run tests with retry capability for flaky tests
          pytest selenium_demoblaze_framework/tests/ \
            --browser=${{ matrix.browser }} \
            -n 2 \
            --dist loadgroup \
            --reruns 2 \
            --reruns-delay 5 \
            --html=reports/test-report-${{ matrix.browser }}.html \
            --self-contained-html \
            --alluredir=reports/allure-results-${{ matrix.browser }} \
            -v \
            --tb=short \
            --maxfail=10 || true
          
          # Check if critical tests passed
          if [ -f "reports/test-report-${{ matrix.browser }}.html" ]; then
            echo "Test report generated successfully"
          else
            echo "Warning: Test report not generated"
          fi

      - name: Upload HTML Test Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: html-test-report-${{ matrix.browser }}
          path: reports/test-report-${{ matrix.browser }}.html
        continue-on-error: true

      - name: Upload Allure Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ matrix.browser }}
          path: reports/allure-results-${{ matrix.browser }}
        continue-on-error: true

      - name: Upload Screenshots
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: screenshots-${{ matrix.browser }}
          path: reports/screenshots
        continue-on-error: true

      - name: Upload Logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-logs-${{ matrix.browser }}
          path: |
            *.log
            reports/*.log
        continue-on-error: true

  deploy-reports:
    needs: test
    runs-on: ubuntu-latest
    if: always()
    permissions:
      contents: write
      pages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
        continue-on-error: true

      - name: Get Allure history
        uses: actions/checkout@v4
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages

      - name: Combine Allure Results
        run: |
          mkdir -p reports/allure-results
          # Merge all browser results
          find artifacts -name "allure-results-*" -type d 2>/dev/null | while read dir; do
            cp -r "$dir"/* reports/allure-results/ 2>/dev/null || true
          done
          echo "Combined allure results from all browsers"
          ls -la reports/allure-results/ 2>/dev/null || echo "No allure results found"

      - name: Generate Combined Allure Report
        if: always()
        uses: simple-elf/allure-report-action@v1.7
        with:
          allure_results: reports/allure-results
          allure_history: allure-history
          keep_reports: 20
          gh_pages: gh-pages
        continue-on-error: true

      - name: Upload Combined Allure Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-report-combined
          path: allure-report
        continue-on-error: true

      - name: Prepare Reports for GitHub Pages
        run: |
          mkdir -p deploy
          
          # Copy allure history
          if [ -d "allure-history" ]; then
            cp -r allure-history/* deploy/ 2>/dev/null || true
          fi
          
          # Create HTML reports directory
          mkdir -p deploy/html-reports
          
          # Copy browser-specific HTML reports
          for browser in chrome edge; do
            if [ -f "artifacts/html-test-report-${browser}/test-report-${browser}.html" ]; then
              cp "artifacts/html-test-report-${browser}/test-report-${browser}.html" \
                 "deploy/html-reports/report-${browser}-${{ github.run_number }}.html"
              echo "Copied ${browser} HTML report"
            else
              echo "No HTML report found for ${browser}"
            fi
          done
          
          # Copy screenshots if available
          mkdir -p deploy/screenshots
          find artifacts -name "screenshots-*" -type d 2>/dev/null | while read dir; do
            cp -r "$dir"/* deploy/screenshots/ 2>/dev/null || true
          done
          
          # Create HTML index page
          cat > deploy/index.html << 'HTMLEOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>Cross-Browser Test Reports - Selenium DemoBlaze</title>
              <meta charset="utf-8">
              <meta name="viewport" content="width=device-width, initial-scale=1">
              <style>
                  * { margin: 0; padding: 0; box-sizing: border-box; }
                  body {
                      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif;
                      line-height: 1.6;
                      color: #333;
                      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                      min-height: 100vh;
                      display: flex;
                      align-items: center;
                      justify-content: center;
                      padding: 20px;
                  }
                  .container {
                      background: white;
                      border-radius: 12px;
                      padding: 40px;
                      box-shadow: 0 20px 60px rgba(0,0,0,0.3);
                      max-width: 1000px;
                      width: 100%;
                      animation: fadeIn 0.5s ease-in;
                  }
                  @keyframes fadeIn {
                      from { opacity: 0; transform: translateY(20px); }
                      to { opacity: 1; transform: translateY(0); }
                  }
                  h1 {
                      color: #2c3e50;
                      text-align: center;
                      margin-bottom: 10px;
                      font-size: 2.5em;
                  }
                  .subtitle {
                      text-align: center;
                      color: #7f8c8d;
                      margin-bottom: 30px;
                      font-size: 1.1em;
                  }
                  .badge {
                      display: inline-block;
                      padding: 5px 12px;
                      border-radius: 20px;
                      font-size: 0.85em;
                      font-weight: 600;
                      margin: 0 5px;
                  }
                  .badge-chrome { background: #4285f4; color: white; }
                  .badge-edge { background: #0078d7; color: white; }
                  .badge-parallel { background: #28a745; color: white; }
                  .info-box {
                      background: #f8f9fa;
                      border-left: 4px solid #667eea;
                      padding: 20px;
                      border-radius: 8px;
                      margin-bottom: 30px;
                  }
                  .info-box p { margin: 5px 0; color: #555; }
                  .info-box strong { color: #333; font-weight: 600; }
                  .info-box code {
                      background: #f0f0f0;
                      padding: 2px 6px;
                      border-radius: 3px;
                      font-size: 0.9em;
                  }
                  .reports-section {
                      display: grid;
                      grid-template-columns: 1fr;
                      gap: 20px;
                      margin-bottom: 30px;
                  }
                  .report-card {
                      background: white;
                      border: 2px solid #e0e0e0;
                      border-radius: 10px;
                      padding: 25px;
                      text-align: center;
                      transition: all 0.3s ease;
                  }
                  .report-card:hover {
                      transform: translateY(-5px);
                      box-shadow: 0 10px 30px rgba(0,0,0,0.15);
                      border-color: #667eea;
                  }
                  .report-card h3 {
                      color: #2c3e50;
                      margin-bottom: 10px;
                      font-size: 1.5em;
                  }
                  .report-card p {
                      color: #7f8c8d;
                      margin-bottom: 20px;
                      font-size: 0.95em;
                  }
                  .btn {
                      display: inline-block;
                      padding: 12px 30px;
                      color: white;
                      text-decoration: none;
                      border-radius: 6px;
                      font-weight: 500;
                      transition: all 0.3s ease;
                      font-size: 1em;
                      margin: 5px;
                  }
                  .btn-allure {
                      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                  }
                  .btn-allure:hover {
                      transform: scale(1.05);
                      box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
                  }
                  .btn-chrome {
                      background: linear-gradient(135deg, #4285f4 0%, #34a853 100%);
                  }
                  .btn-chrome:hover {
                      transform: scale(1.05);
                      box-shadow: 0 5px 15px rgba(66, 133, 244, 0.4);
                  }
                  .btn-edge {
                      background: linear-gradient(135deg, #0078d7 0%, #00bcf2 100%);
                  }
                  .btn-edge:hover {
                      transform: scale(1.05);
                      box-shadow: 0 5px 15px rgba(0, 120, 215, 0.4);
                  }
                  .browser-reports {
                      display: flex;
                      justify-content: center;
                      flex-wrap: wrap;
                      margin-top: 20px;
                      gap: 10px;
                  }
                  .emoji { font-size: 1.5em; margin-bottom: 10px; }
                  .timestamp {
                      text-align: center;
                      color: #95a5a6;
                      font-size: 0.85em;
                      margin-top: 20px;
                  }
                  .feature-list {
                      background: #e8f4f8;
                      border-radius: 8px;
                      padding: 20px;
                      margin: 20px 0;
                  }
                  .feature-list h4 {
                      color: #2c3e50;
                      margin-bottom: 15px;
                      display: flex;
                      align-items: center;
                      gap: 10px;
                  }
                  .feature-list ul {
                      list-style: none;
                      padding-left: 0;
                  }
                  .feature-list li {
                      padding: 8px 0;
                      color: #555;
                  }
                  .feature-list li::before {
                      content: "✓ ";
                      color: #28a745;
                      font-weight: bold;
                      margin-right: 8px;
                  }
                  .history-section {
                      margin-top: 30px;
                      padding-top: 30px;
                      border-top: 2px solid #e0e0e0;
                  }
                  .history-section h3 {
                      color: #2c3e50;
                      margin-bottom: 15px;
                      text-align: center;
                  }
                  .history-links {
                      display: flex;
                      flex-wrap: wrap;
                      gap: 10px;
                      justify-content: center;
                  }
                  .history-link {
                      padding: 8px 16px;
                      background: #f8f9fa;
                      border: 1px solid #ddd;
                      border-radius: 5px;
                      text-decoration: none;
                      color: #555;
                      transition: all 0.3s ease;
                      font-size: 0.9em;
                  }
                  .history-link:hover {
                      background: #667eea;
                      color: white;
                      border-color: #667eea;
                  }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>🧪 Cross-Browser Test Reports</h1>
                  <p class="subtitle">
                      Selenium DemoBlaze Automation
                      <br>
                      <span class="badge badge-chrome">Chrome</span>
                      <span class="badge badge-edge">Edge</span>
                      <span class="badge badge-parallel">Parallel Execution</span>
                  </p>
                  
                  <div class="info-box">
                      <p><strong>📦 Repository:</strong> GITHUB_REPOSITORY_PLACEHOLDER</p>
                      <p><strong>🏃 Run Number:</strong> #GITHUB_RUN_NUMBER_PLACEHOLDER</p>
                      <p><strong>🌿 Branch:</strong> GITHUB_REF_NAME_PLACEHOLDER</p>
                      <p><strong>🔨 Commit:</strong> <code>GITHUB_SHA_PLACEHOLDER</code></p>
                      <p><strong>👤 Actor:</strong> GITHUB_ACTOR_PLACEHOLDER</p>
                  </div>
          
                  <div class="feature-list">
                      <h4>🚀 Test Execution Features</h4>
                      <ul>
                          <li>Cross-browser testing on Chrome and Edge</li>
                          <li>Parallel test execution with pytest-xdist</li>
                          <li>Automatic retry for flaky tests</li>
                          <li>Thread-safe screenshot handling</li>
                          <li>Comprehensive Allure reporting with trends</li>
                          <li>Browser-specific HTML reports</li>
                          <li>Automated report history tracking</li>
                      </ul>
                  </div>
          
                  <div class="reports-section">
                      <div class="report-card">
                          <div class="emoji">📊</div>
                          <h3>Combined Allure Report</h3>
                          <p>Interactive test report combining results from all browsers with detailed execution info, trends, and history</p>
                          <a href="GITHUB_RUN_NUMBER_PLACEHOLDER/" class="btn btn-allure">Open Allure Report</a>
                      </div>
                      
                      <div class="report-card">
                          <div class="emoji">🌐</div>
                          <h3>Browser-Specific HTML Reports</h3>
                          <p>Detailed HTML reports generated by pytest-html for each browser</p>
                          <div class="browser-reports">
                              <a href="html-reports/report-chrome-GITHUB_RUN_NUMBER_PLACEHOLDER.html" class="btn btn-chrome">
                                  Chrome Report
                              </a>
                              <a href="html-reports/report-edge-GITHUB_RUN_NUMBER_PLACEHOLDER.html" class="btn btn-edge">
                                  Edge Report
                              </a>
                          </div>
                      </div>
                  </div>
          
                  <div class="history-section">
                      <h3>📚 Previous Reports</h3>
                      <div class="history-links" id="history-links">
                          <!-- Will be populated by JavaScript -->
                      </div>
                  </div>
          
                  <div class="timestamp">
                      Generated on: <span id="timestamp"></span>
                  </div>
              </div>
          
              <script>
                  document.getElementById('timestamp').textContent = new Date().toLocaleString();
                  
                  const currentRun = GITHUB_RUN_NUMBER_PLACEHOLDER;
                  const historyContainer = document.getElementById('history-links');
                  
                  for(let i = currentRun - 1; i > Math.max(0, currentRun - 10); i--) {
                      const linkDiv = document.createElement('div');
                      linkDiv.style.display = 'inline-block';
                      linkDiv.innerHTML = '<a href="' + i + '/" class="history-link" title="View Run #' + i + '">Run #' + i + '</a>';
                      historyContainer.appendChild(linkDiv);
                  }
                  
                  if (currentRun <= 1) {
                      historyContainer.innerHTML = '<p style="color: #95a5a6;">No previous reports available</p>';
                  }
              </script>
          </body>
          </html>
          HTMLEOF
          
          # Replace placeholders with actual values
          sed -i "s/GITHUB_REPOSITORY_PLACEHOLDER/${{ github.repository }}/g" deploy/index.html
          sed -i "s/GITHUB_RUN_NUMBER_PLACEHOLDER/${{ github.run_number }}/g" deploy/index.html
          sed -i "s/GITHUB_REF_NAME_PLACEHOLDER/${{ github.ref_name }}/g" deploy/index.html
          sed -i "s/GITHUB_SHA_PLACEHOLDER/${{ github.sha }}/g" deploy/index.html
          sed -i "s/GITHUB_ACTOR_PLACEHOLDER/${{ github.actor }}/g" deploy/index.html
          
          echo "Index page created successfully"

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: deploy
          force_orphan: false
          keep_files: false

      - name: Post Report URLs
        run: |
          # Extract repository name
          REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
          OWNER=$(echo "${{ github.repository }}" | cut -d'/' -f1 | tr '[:upper:]' '[:lower:]')
          
          echo "### 📊 Cross-Browser Test Reports Published! 🎉" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**🌐 Main Dashboard:** https://${OWNER}.github.io/${REPO_NAME}/" >> $GITHUB_STEP_SUMMARY
          echo "**📈 Combined Allure Report:** https://${OWNER}.github.io/${REPO_NAME}/${{ github.run_number }}/" >> $GITHUB_STEP_SUMMARY
          echo "**🔵 Chrome HTML Report:** https://${OWNER}.github.io/${REPO_NAME}/html-reports/report-chrome-${{ github.run_number }}.html" >> $GITHUB_STEP_SUMMARY
          echo "**🔷 Edge HTML Report:** https://${OWNER}.github.io/${REPO_NAME}/html-reports/report-edge-${{ github.run_number }}.html" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "✅ Tests executed on Chrome and Edge in parallel" >> $GITHUB_STEP_SUMMARY
          echo "⚡ Parallel execution with optimized workers" >> $GITHUB_STEP_SUMMARY
          echo "🔄 Automatic retry for flaky tests (2 retries with 5s delay)" >> $GITHUB_STEP_SUMMARY
          echo "🔒 Thread-safe screenshot and report generation" >> $GITHUB_STEP_SUMMARY
          echo "📸 Screenshots available in artifacts" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Run Number:** #${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY