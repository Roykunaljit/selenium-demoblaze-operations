name: Selenium Test Suite - Cross Browser Parallel

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write

    strategy:
      matrix:
        browser: [chrome, edge]
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Install Chrome and Chromedriver
        if: matrix.browser == 'chrome'
        run: |
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
          CHROME_VERSION=$(google-chrome --version | awk '{print $3}' | cut -d '.' -f1)
          DRIVER_VERSION=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/LATEST_RELEASE_${CHROME_VERSION}")
          echo "Chrome version: $(google-chrome --version)"
          echo "Chromedriver version: $DRIVER_VERSION"
          wget -O chromedriver.zip "https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/${DRIVER_VERSION}/linux64/chromedriver-linux64.zip"
          unzip chromedriver.zip
          sudo mv chromedriver-linux64/chromedriver /usr/local/bin/
          chmod +x /usr/local/bin/chromedriver
          chromedriver --version

      - name: Install Microsoft Edge (Driver Auto-Managed)
        if: matrix.browser == 'edge'
        run: |
          # Remove any old EdgeDriver that might conflict
          echo "Cleaning up old EdgeDriver..."
          sudo rm -f /usr/bin/msedgedriver
          sudo rm -f /usr/local/bin/msedgedriver
          
          # Install Microsoft Edge Browser
          echo "Installing Microsoft Edge..."
          curl -fsSL https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor -o /usr/share/keyrings/microsoft-edge.gpg
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/microsoft-edge.gpg] https://packages.microsoft.com/repos/edge stable main" | sudo tee /etc/apt/sources.list.d/microsoft-edge.list
          sudo apt-get update
          sudo apt-get install -y microsoft-edge-stable
          
          # Verify installation
          microsoft-edge --version
          echo "✅ Edge installed - Selenium Manager will auto-download matching driver"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create Keyword-Driven Test Data
        run: python create_fresh_test_data.py

      - name: Enforce Headless Mode for Tests
        run: |
          sed -i 's/^headless_mode = False/headless_mode = True/' selenium_demoblaze_framework/config/config.ini

      - name: Verify Browser Setup
        run: |
          if [ "${{ matrix.browser }}" == "chrome" ]; then
            echo "Chrome Setup:"
            google-chrome --version
            chromedriver --version
          elif [ "${{ matrix.browser }}" == "edge" ]; then
            echo "Edge Setup:"
            microsoft-edge --version
            echo "EdgeDriver will be managed by Selenium Manager"
          fi

      - name: Run Pytest with Parallel Execution
        env:
          PYTHONPATH: ${{ github.workspace }}
          GITHUB_ACTIONS: true
        run: |
          pytest selenium_demoblaze_framework/tests/ \
            --browser=${{ matrix.browser }} \
            -n 4 \
            --dist loadgroup \
            --html=reports/test-report-${{ matrix.browser }}.html \
            --self-contained-html \
            --alluredir=reports/allure-results-${{ matrix.browser }} \
            -v \
            --tb=short \
            --maxfail=5 \
            --continue-on-collection-errors

      - name: Upload HTML Test Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: html-test-report-${{ matrix.browser }}
          path: reports/test-report-${{ matrix.browser }}.html

      - name: Upload Allure Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ matrix.browser }}
          path: reports/allure-results-${{ matrix.browser }}

      - name: Upload Screenshots
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: screenshots-${{ matrix.browser }}
          path: reports/screenshots
        continue-on-error: true

      - name: Upload Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs-${{ matrix.browser }}
          path: logs
        continue-on-error: true

  deploy-reports:
    needs: test
    runs-on: ubuntu-latest
    if: always()
    permissions:
      contents: write
      pages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Get Allure history
        uses: actions/checkout@v4
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages

      - name: Combine Allure Results
        run: |
          mkdir -p reports/allure-results
          find artifacts -name "allure-results-*" -type d | while read dir; do
            cp -r "$dir"/* reports/allure-results/ 2>/dev/null || true
          done
          echo "✅ Combined allure results from all browsers"
          ls -la reports/allure-results/ || echo "No allure results found"

      - name: Generate Combined Allure Report
        uses: simple-elf/allure-report-action@v1.7
        with:
          allure_results: reports/allure-results
          allure_history: allure-history
          keep_reports: 20
          gh_pages: gh-pages

      - name: Upload Combined Allure Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-report-combined
          path: allure-report

      - name: Prepare Reports for GitHub Pages
        run: |
          mkdir -p deploy
          
          # Copy Allure history
          if [ -d "allure-history" ]; then
            cp -r allure-history/* deploy/ 2>/dev/null || true
            echo "✅ Copied Allure history"
          fi
          
          # Create HTML reports directory
          mkdir -p deploy/html-reports
          
          # Copy browser-specific HTML reports
          for browser in chrome edge; do
            if [ -f "artifacts/html-test-report-${browser}/test-report-${browser}.html" ]; then
              cp "artifacts/html-test-report-${browser}/test-report-${browser}.html" \
                 "deploy/html-reports/report-${browser}-${{ github.run_number }}.html"
              echo "✅ Copied ${browser} HTML report"
            else
              echo "⚠️  ${browser} HTML report not found"
            fi
          done
          
          # Copy screenshots
          mkdir -p deploy/screenshots
          find artifacts -name "screenshots-*" -type d | while read dir; do
            cp -r "$dir"/* deploy/screenshots/ 2>/dev/null || true
          done
          
          # Copy logs
          mkdir -p deploy/logs
          find artifacts -name "logs-*" -type d | while read dir; do
            cp -r "$dir"/* deploy/logs/ 2>/dev/null || true
          done
          
          # Create main index.html
          cat > deploy/index.html <<'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Cross-Browser Test Reports - Selenium DemoBlaze</title>
              <style>
                  * {
                      margin: 0;
                      padding: 0;
                      box-sizing: border-box;
                  }
                  
                  body {
                      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
                      line-height: 1.6;
                      color: #333;
                      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                      min-height: 100vh;
                      display: flex;
                      align-items: center;
                      justify-content: center;
                      padding: 20px;
                  }
                  
                  .container {
                      background: white;
                      border-radius: 16px;
                      padding: 50px;
                      box-shadow: 0 25px 70px rgba(0,0,0,0.3);
                      max-width: 1100px;
                      width: 100%;
                      animation: fadeIn 0.6s ease-in;
                  }
                  
                  @keyframes fadeIn {
                      from { 
                          opacity: 0; 
                          transform: translateY(30px); 
                      }
                      to { 
                          opacity: 1; 
                          transform: translateY(0); 
                      }
                  }
                  
                  h1 {
                      color: #2c3e50;
                      text-align: center;
                      margin-bottom: 15px;
                      font-size: 2.8em;
                      font-weight: 700;
                  }
                  
                  .subtitle {
                      text-align: center;
                      color: #7f8c8d;
                      margin-bottom: 35px;
                      font-size: 1.2em;
                      line-height: 1.8;
                  }
                  
                  .badge {
                      display: inline-block;
                      padding: 6px 14px;
                      border-radius: 20px;
                      font-size: 0.85em;
                      font-weight: 600;
                      margin: 5px;
                      text-transform: uppercase;
                      letter-spacing: 0.5px;
                  }
                  
                  .badge-chrome {
                      background: linear-gradient(135deg, #4285f4 0%, #34a853 100%);
                      color: white;
                  }
                  
                  .badge-edge {
                      background: linear-gradient(135deg, #0078d7 0%, #00bcf2 100%);
                      color: white;
                  }
                  
                  .badge-parallel {
                      background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
                      color: white;
                  }
                  
                  .badge-selenium {
                      background: linear-gradient(135deg, #43B02A 0%, #2d7a1e 100%);
                      color: white;
                  }
                  
                  .info-box {
                      background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
                      border-left: 5px solid #667eea;
                      padding: 25px;
                      border-radius: 10px;
                      margin-bottom: 35px;
                      box-shadow: 0 4px 6px rgba(0,0,0,0.07);
                  }
                  
                  .info-box p {
                      margin: 8px 0;
                      color: #555;
                      font-size: 0.95em;
                  }
                  
                  .info-box strong {
                      color: #2c3e50;
                      font-weight: 600;
                      min-width: 120px;
                      display: inline-block;
                  }
                  
                  .info-box code {
                      background: #fff;
                      padding: 2px 8px;
                      border-radius: 4px;
                      font-family: 'Courier New', monospace;
                      font-size: 0.85em;
                      color: #d63384;
                  }
                  
                  .reports-section {
                      display: grid;
                      grid-template-columns: 1fr;
                      gap: 25px;
                      margin-bottom: 35px;
                  }
                  
                  .report-card {
                      background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
                      border: 2px solid #e0e0e0;
                      border-radius: 12px;
                      padding: 30px;
                      text-align: center;
                      transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
                      position: relative;
                      overflow: hidden;
                  }
                  
                  .report-card::before {
                      content: '';
                      position: absolute;
                      top: 0;
                      left: -100%;
                      width: 100%;
                      height: 100%;
                      background: linear-gradient(90deg, transparent, rgba(255,255,255,0.3), transparent);
                      transition: left 0.5s;
                  }
                  
                  .report-card:hover::before {
                      left: 100%;
                  }
                  
                  .report-card:hover {
                      transform: translateY(-8px);
                      box-shadow: 0 15px 40px rgba(102, 126, 234, 0.25);
                      border-color: #667eea;
                  }
                  
                  .report-card h3 {
                      color: #2c3e50;
                      margin-bottom: 12px;
                      font-size: 1.6em;
                      font-weight: 600;
                  }
                  
                  .report-card p {
                      color: #7f8c8d;
                      margin-bottom: 25px;
                      font-size: 1em;
                      line-height: 1.6;
                  }
                  
                  .emoji {
                      font-size: 2.5em;
                      margin-bottom: 15px;
                      display: block;
                      animation: bounce 2s infinite;
                  }
                  
                  @keyframes bounce {
                      0%, 100% { transform: translateY(0); }
                      50% { transform: translateY(-10px); }
                  }
                  
                  .btn {
                      display: inline-block;
                      padding: 14px 32px;
                      color: white;
                      text-decoration: none;
                      border-radius: 8px;
                      font-weight: 600;
                      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
                      font-size: 1em;
                      margin: 8px;
                      box-shadow: 0 4px 6px rgba(0,0,0,0.1);
                      text-transform: uppercase;
                      letter-spacing: 0.5px;
                  }
                  
                  .btn-allure {
                      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                  }
                  
                  .btn-allure:hover {
                      transform: scale(1.08);
                      box-shadow: 0 8px 20px rgba(102, 126, 234, 0.4);
                  }
                  
                  .btn-chrome {
                      background: linear-gradient(135deg, #4285f4 0%, #34a853 100%);
                  }
                  
                  .btn-chrome:hover {
                      transform: scale(1.08);
                      box-shadow: 0 8px 20px rgba(66, 133, 244, 0.4);
                  }
                  
                  .btn-edge {
                      background: linear-gradient(135deg, #0078d7 0%, #00bcf2 100%);
                  }
                  
                  .btn-edge:hover {
                      transform: scale(1.08);
                      box-shadow: 0 8px 20px rgba(0, 120, 215, 0.4);
                  }
                  
                  .browser-reports {
                      display: flex;
                      justify-content: center;
                      flex-wrap: wrap;
                      margin-top: 20px;
                      gap: 15px;
                  }
                  
                  .feature-list {
                      background: linear-gradient(135deg, #e8f4f8 0%, #d4edff 100%);
                      border-radius: 10px;
                      padding: 25px;
                      margin: 25px 0;
                      border: 2px solid #b8daff;
                  }
                  
                  .feature-list h4 {
                      color: #2c3e50;
                      margin-bottom: 18px;
                      display: flex;
                      align-items: center;
                      gap: 12px;
                      font-size: 1.3em;
                      font-weight: 600;
                  }
                  
                  .feature-list ul {
                      list-style: none;
                      padding-left: 0;
                  }
                  
                  .feature-list li {
                      padding: 10px 0;
                      color: #555;
                      font-size: 1em;
                      transition: all 0.3s ease;
                  }
                  
                  .feature-list li:hover {
                      color: #2c3e50;
                      transform: translateX(5px);
                  }
                  
                  .feature-list li::before {
                      content: "✓ ";
                      color: #28a745;
                      font-weight: bold;
                      margin-right: 10px;
                      font-size: 1.2em;
                  }
                  
                  .history-section {
                      margin-top: 35px;
                      padding-top: 35px;
                      border-top: 3px solid #e0e0e0;
                  }
                  
                  .history-section h3 {
                      color: #2c3e50;
                      margin-bottom: 20px;
                      text-align: center;
                      font-size: 1.6em;
                      font-weight: 600;
                  }
                  
                  .history-links {
                      display: flex;
                      flex-wrap: wrap;
                      gap: 12px;
                      justify-content: center;
                  }
                  
                  .history-link {
                      padding: 10px 18px;
                      background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
                      border: 2px solid #dee2e6;
                      border-radius: 6px;
                      text-decoration: none;
                      color: #555;
                      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
                      font-size: 0.95em;
                      font-weight: 500;
                  }
                  
                  .history-link:hover {
                      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                      color: white;
                      border-color: #667eea;
                      transform: translateY(-3px);
                      box-shadow: 0 5px 15px rgba(102, 126, 234, 0.3);
                  }
                  
                  .timestamp {
                      text-align: center;
                      color: #95a5a6;
                      font-size: 0.9em;
                      margin-top: 25px;
                      padding-top: 20px;
                      border-top: 1px solid #e0e0e0;
                  }
                  
                  @media (max-width: 768px) {
                      .container {
                          padding: 30px 20px;
                      }
                      
                      h1 {
                          font-size: 2em;
                      }
                      
                      .subtitle {
                          font-size: 1em;
                      }
                      
                      .btn {
                          padding: 12px 24px;
                          font-size: 0.9em;
                      }
                  }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>🧪 Cross-Browser Test Reports</h1>
                  <p class="subtitle">
                      Selenium DemoBlaze E2E Automation Framework
                      <br>
                      <span class="badge badge-chrome">Chrome</span>
                      <span class="badge badge-edge">Edge</span>
                      <span class="badge badge-parallel">Parallel</span>
                      <span class="badge badge-selenium">Selenium 4</span>
                  </p>
                  
                  <div class="info-box">
                      <p><strong>📦 Repository:</strong> ${{ github.repository }}</p>
                      <p><strong>🏃 Run Number:</strong> #${{ github.run_number }}</p>
                      <p><strong>🌿 Branch:</strong> ${{ github.ref_name }}</p>
                      <p><strong>🔨 Commit:</strong> <code>${{ github.sha }}</code></p>
                      <p><strong>👤 Triggered by:</strong> ${{ github.actor }}</p>
                      <p><strong>📅 Timestamp:</strong> <span id="current-time"></span></p>
                  </div>

                  <div class="feature-list">
                      <h4>🚀 Framework Capabilities</h4>
                      <ul>
                          <li>Cross-browser testing on Chrome and Microsoft Edge</li>
                          <li>Parallel test execution with pytest-xdist (4 workers per browser)</li>
                          <li>Thread-safe screenshot capture on test failures</li>
                          <li>Comprehensive Allure reporting with trends and history</li>
                          <li>Browser-specific HTML reports with detailed logs</li>
                          <li>Automated report history tracking (last 20 runs)</li>
                          <li>Page Object Model with Page Factory pattern</li>
                          <li>Custom logger with file and console output</li>
                          <li>Keyword-driven testing support</li>
                          <li>Link checker utility for broken link detection</li>
                      </ul>
                  </div>

                  <div class="reports-section">
                      <div class="report-card">
                          <span class="emoji">📊</span>
                          <h3>Combined Allure Report</h3>
                          <p>Interactive test execution report combining results from all browsers with detailed steps, screenshots, trends, and execution history</p>
                          <a href="${{ github.run_number }}/" class="btn btn-allure">📈 Open Allure Dashboard</a>
                      </div>
                      
                      <div class="report-card">
                          <span class="emoji">🌐</span>
                          <h3>Browser-Specific HTML Reports</h3>
                          <p>Detailed pytest-html reports showing test results, execution times, and failures for each browser individually</p>
                          <div class="browser-reports">
                              <a href="html-reports/report-chrome-${{ github.run_number }}.html" class="btn btn-chrome">
                                  🔵 Chrome Report
                              </a>
                              <a href="html-reports/report-edge-${{ github.run_number }}.html" class="btn btn-edge">
                                  🔷 Edge Report
                              </a>
                          </div>
                      </div>
                  </div>

                  <div class="history-section">
                      <h3>📚 Test Execution History</h3>
                      <div class="history-links" id="history-links">
                          <p style="color: #95a5a6; text-align: center;">Loading previous reports...</p>
                      </div>
                  </div>

                  <div class="timestamp">
                      ⏰ Report generated on: <strong id="timestamp"></strong>
                  </div>
              </div>

              <script>
                  // Set current timestamp
                  const now = new Date();
                  document.getElementById('timestamp').textContent = now.toLocaleString('en-US', {
                      weekday: 'long',
                      year: 'numeric',
                      month: 'long',
                      day: 'numeric',
                      hour: '2-digit',
                      minute: '2-digit',
                      second: '2-digit',
                      timeZoneName: 'short'
                  });
                  
                  document.getElementById('current-time').textContent = now.toLocaleString('en-US', {
                      month: 'short',
                      day: 'numeric',
                      year: 'numeric',
                      hour: '2-digit',
                      minute: '2-digit'
                  });
                  
                  // Generate history links
                  const currentRun = ${{ github.run_number }};
                  const historyContainer = document.getElementById('history-links');
                  
                  if (currentRun > 1) {
                      historyContainer.innerHTML = '';
                      const historyCount = Math.min(10, currentRun - 1);
                      
                      for(let i = currentRun - 1; i > currentRun - 1 - historyCount; i--) {
                          const link = document.createElement('a');
                          link.href = `${i}/`;
                          link.className = 'history-link';
                          link.textContent = `Run #${i}`;
                          link.title = `View test results from run #${i}`;
                          historyContainer.appendChild(link);
                      }
                  } else {
                      historyContainer.innerHTML = '<p style="color: #95a5a6; text-align: center;">No previous test runs available yet</p>';
                  }
              </script>
          </body>
          </html>
          EOF
          
          echo "✅ GitHub Pages deployment directory prepared"
          ls -la deploy/

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: deploy
          force_orphan: false
          keep_files: false
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'
          commit_message: 'Deploy test reports for run #${{ github.run_number }}'

      - name: Post Report URLs to Summary
        if: always()
        run: |
          echo "# 📊 Cross-Browser Test Reports Published! 🎉" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔗 Report Links" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Report Type | URL |" >> $GITHUB_STEP_SUMMARY
          echo "|-------------|-----|" >> $GITHUB_STEP_SUMMARY
          echo "| 🏠 Main Dashboard | [Open Dashboard](https://roykunaljit.github.io/selenium-demoblaze-automations/) |" >> $GITHUB_STEP_SUMMARY
          echo "| 📈 Combined Allure | [Open Allure Report](https://roykunaljit.github.io/selenium-demoblaze-automations/${{ github.run_number }}/) |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔵 Chrome HTML | [Open Chrome Report](https://roykunaljit.github.io/selenium-demoblaze-automations/html-reports/report-chrome-${{ github.run_number }}.html) |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔷 Edge HTML | [Open Edge Report](https://roykunaljit.github.io/selenium-demoblaze-automations/html-reports/report-edge-${{ github.run_number }}.html) |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📋 Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Browsers Tested:** Chrome, Microsoft Edge" >> $GITHUB_STEP_SUMMARY
          echo "⚡ **Parallel Workers:** 4 workers per browser" >> $GITHUB_STEP_SUMMARY
          echo "🔒 **Thread Safety:** Enabled for screenshots and logs" >> $GITHUB_STEP_SUMMARY
          echo "📸 **Artifacts:** Screenshots, logs, and reports uploaded" >> $GITHUB_STEP_SUMMARY
          echo "🐍 **Python Version:** 3.9" >> $GITHUB_STEP_SUMMARY
          echo "🤖 **Selenium Manager:** Auto-managed drivers" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**📌 Run Number:** #${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**🔨 Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**🌿 Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**👤 Triggered by:** @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY